# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers

class PulseImage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPulseImage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PulseImage()
        x.Init(buf, n + offset)
        return x

    # PulseImage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PulseImage
    def PulseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PulseImage
    def DetectorId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PulseImage
    def DetectorIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PulseImage
    def DetectionCount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PulseImage
    def DetectionCountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PulseImageStart(builder): builder.StartObject(3)
def PulseImageAddPulseTime(builder, pulseTime): builder.PrependUint64Slot(0, pulseTime, 0)
def PulseImageAddDetectorId(builder, detectorId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detectorId), 0)
def PulseImageStartDetectorIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PulseImageAddDetectionCount(builder, detectionCount): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(detectionCount), 0)
def PulseImageStartDetectionCountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PulseImageEnd(builder): return builder.EndObject()